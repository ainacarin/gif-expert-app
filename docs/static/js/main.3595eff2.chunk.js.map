{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","api/giphyApi.js","components/GifGrid.js","hooks/useFetchGif.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","error","setError","onSubmit","event","preventDefault","trim","length","oldCategories","type","value","onChange","target","placeholder","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","process","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGif","GifExpertApp","React","categories","ReactDOM","render","document","getElementById"],"mappings":"8QAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC5B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA0BF,mBAAS,MAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAuBA,OACE,mCACE,uBAAMC,SAfW,SAACC,GACpBA,EAAMC,iBAGFN,EAAWO,OAAOC,OAAS,GAC7BV,GAAc,SAACW,GAAD,OAAoBT,GAApB,mBAAmCS,OAEjDR,EAAc,KAEdE,EAAS,gBAMT,UACE,uBACEO,KAAK,OACLC,MAAOX,EACPY,SAxBkB,SAACP,GAFFF,EAAS,IAIhCF,EAAcI,EAAMQ,OAAOF,QAuBrBG,YAAY,wBAEbZ,GAAS,4BAAIA,U,QCnCTa,EAAc,SAAC,GAA0B,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,IAEtC,OACI,sBAAKF,GAAIA,EAAIG,UAAU,yCAAvB,UACI,4BAAIF,IACJ,qBAAKG,IAAKF,EAAKG,IAAKJ,Q,uBCPnBK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbN,EADa,UAEdO,uCAFc,cAEkCC,UAAWH,GAF7C,6BAE6EE,oCAF7E,SAGAE,MAAMT,GAHN,cAGbU,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GACrB,IAAQjB,EAAsBiB,EAAtBjB,GAAIC,EAAkBgB,EAAlBhB,MAAOiB,EAAWD,EAAXC,OACnB,MAAO,CACLlB,KACAC,QACAC,IAAG,OAAEgB,QAAF,IAAEA,OAAF,EAAEA,EAAQC,iBAAiBjB,QAVf,kBAaZa,GAbY,4CAAH,sDCIPK,EAAU,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAEtB,ECJuB,SAACA,GAE1B,MAA0BxB,mBAAS,CACjC+B,KAAM,GACNO,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAXAC,qBAAU,WACRlB,EAAQC,GAAUkB,MAAK,SAACC,GACtBC,YAAW,WACTJ,EAAS,CACPT,KAAMY,EACNL,SAAS,MAEV,UAEJ,CAACd,IAEGe,EDf4BM,CAAarB,GAAjCW,EAAb,EAAQJ,KAAaO,EAArB,EAAqBA,QAEvB,OACE,qCACE,oBAAIlB,UAAU,mCAAd,SAAkDI,IACjDc,GAAW,2CACZ,qBAAKlB,UAAU,YAAf,SACGe,EAAOF,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIjB,aETnB6B,EAAe,WAC1B,IAGA,EAAoCC,IAAM/C,SAHnB,CAAC,mBAGxB,mBAAOgD,EAAP,KAAmBjD,EAAnB,KAEA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BACGiD,EAAWf,KAAI,SAACT,GAAD,OAAc,cAAC,EAAD,CAAwBA,SAAWA,GAArBA,YCbpDyB,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.3595eff2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport \"./AddCategory.css\";\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [error, setError] = useState(null);\r\n\r\n\r\n  const resetError = () => setError('');\r\n\r\n  const handleChangeInput = (event) => {\r\n    resetError();\r\n    setInputValue(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    // validation no empty input\r\n    if (inputValue.trim().length > 1) {\r\n      setCategories((oldCategories) => [inputValue, ...oldCategories]);\r\n      // clean input\r\n      setInputValue(\"\");\r\n    } else{\r\n      setError('Error value');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          value={inputValue}\r\n          onChange={handleChangeInput}\r\n          placeholder=\"Write new character\"\r\n        ></input>\r\n        {error && <p>{error}</p>}\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\n// Proptypes definition\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}","import React from 'react';\r\n\r\n\r\nexport const GifGridItem = ( { id, title, url } ) => {\r\n\r\n    return (\r\n        <div id={id} className='card animate__animated animate__fadeIn'>\r\n            <p>{title}</p>\r\n            <img src={url} alt={title} />\r\n        </div>\r\n    );\r\n\r\n};","\r\nexport const getGifs = async (category) => {\r\n    const url =\r\n      `${process.env.REACT_APP_BASE_URL_GIF_SEARCH}?q=${ encodeURI( category ) }&limit=10&api_key=${process.env.REACT_APP_API_KEY_GIF}`\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    const gifs = data.map((img) => {\r\n      const { id, title, images } = img;\r\n      return {\r\n        id,\r\n        title,\r\n        url: images?.downsized_medium.url,\r\n      };\r\n    });\r\n    return gifs; //promise\r\n  };","import React from \"react\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nimport { useFetchGif } from '../hooks/useFetchGif';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data:images, loading } = useFetchGif( category );\r\n\r\n  return (\r\n    <>\r\n      <h3 className='animate__animated animate__flash'>{category}</h3>\r\n      {loading && <p>Loading...</p>}\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../api/giphyApi\";\r\n\r\nexport const useFetchGif = (category) => {\r\n  // advice about changes\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  // exec once time\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      setTimeout(() => {\r\n        setState({\r\n          data: imgs,\r\n          loading: false,\r\n        });\r\n      }, 3000);\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React from \"react\";\r\n\r\nimport \"./GifExpertApp.css\";\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n  const categoriesInit = [\"Rick and Morty\"];\r\n\r\n  // change => new render\r\n  const [categories, setCategories] = React.useState(categoriesInit);\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={ setCategories }/>\r\n      <hr />\r\n\r\n      <ol>\r\n        {categories.map((category) => <GifGrid key={category} category={ category }/>)}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}